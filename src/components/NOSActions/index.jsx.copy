import React from "react";
import injectSheet from "react-jss";
import PropTypes from "prop-types";
import { react } from "@nosplatform/api-functions";
import utils from "../../utils"

const { injectNOS, nosProps } = react.default;

const styles = {
  button: {
    margin: "16px",
    fontSize: "14px"
  }
};
 function convertUnicode(input) {
    var comma_separated = input.replace(/\\u(\w\w\w\w)/g,function(a,b) {
      var charcode = parseInt(b,16);
      if (charcode == 0) return ''
      else if (charcode == 3|| charcode==4) return ','
      else return String.fromCharCode(charcode);
    });

    return comma_separated.split(',')
  }
  function hex2a(hexx) {
    var hex = hexx.toString();//force conversion
    var str = '';
    for (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return str;
  }

  function deserialize_array(data){
      var ret_val = []
      console.log(JSON.stringify(data))
      if (!data || data.length == 0) return []
      for (var i = 0; i < data.length;i++){
           console.log(JSON.stringify(data[i]))
           var cur = data[i]
           var type = cur.type
           if (type == 'Array'){
               var par_val = deserialize_array(cur.value)
               if (par_val.length > 0)
                 ret_val.push(par_val)
           }
           else if(type == 'ByteArray'){
               ret_val.push(hex2a(cur.value))
           }
           else ret_val.push(cur.value.toString());
       }
       return ret_val
  }

class NOSActions extends React.Component {

  handleAlert = async func => { var value = await func;
          //console.log(convertUnicode(JSON.stringify(value.substring(4))));
          //alert(convertUnicode(JSON.stringify(value.substring(4))));
          //var ab = utils.unhex(value.stack)
          var ab = JSON.stringify(value)
          alert(ab)
          //console.log(JSON.stringify(deserialize_array(value.stack[1].value)))
        }

  // handleGetAddress = async () => alert(await this.props.nos.getAddress());

  handleClaimGas = () =>
    this.props.nos
      .claimGas()
      .then(alert)
      .catch(alert);

  render() {
    const { classes, nos } = this.props;

    const neo = "c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b";
    const gas = "602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7";
    const rpx = "220fbdac9761352dba8d97c4874224ddb68b13d9";

    // Add your smart contract's scriptHash here
    const scriptHash = "220fbdac9761352dba8d97c4874224ddb68b13d9";

    // The operation of your smart contract you want to (test)invoke
    const operation = "dd";

    // The necessary arguments for you (test)invoke
    const args = [];

    // The storagekey you want to query
    const key = "serialized";

    // The amount and recipient of your send function
    const recipient = "";
    const amount = "";

    const invoke = { scriptHash, operation, args }; // and testInvoke
    const getStorage = { scriptHash, key, decodeOutput: true };
    const send = { amount, asset: gas, recipient };

    return (
      <React.Fragment>
        <button className={classes.button} onClick={() => this.handleAlert(nos.getAddress())}>
          Get Address
        </button>
        <button
          className={classes.button}
          onClick={() => this.handleAlert(nos.getBalance({ asset: neo }))}
        >
          Get NEO Balance
        </button>
        <button
          className={classes.button}
          onClick={() => this.handleAlert(nos.getBalance({ asset: gas }))}
        >
          Get GAS Balance
        </button>
        <button
          className={classes.button}
          onClick={() => this.handleAlert(nos.getBalance({ asset: rpx }))}
        >
          Get RPX Balance
        </button>

        <button className={classes.button} onClick={this.handleClaimGas}>
          Claim Gas
        </button>
        <button className={classes.button} onClick={() => this.handleAlert(nos.send(send))}>
          Send GAS to...
        </button>

        <button className={classes.button} onClick={() => {this.handleAlert(nos.testInvoke(invoke))}}>
          TestInvoke
        </button>

          <button
            className={classes.button}
            onClick={() => this.handleAlert(nos.invoke(invoke))}
          >
            Invoke
          </button>

        <button
          className={classes.button}
          onClick={() => {
            var storage = nos.getStorage(getStorage);
            this.handleAlert(storage)}}
        >
          GetStorage
        </button>
      </React.Fragment>
    );
  }
}

NOSActions.propTypes = {
  classes: PropTypes.objectOf(PropTypes.any).isRequired,
  nos: nosProps.isRequired
};

export default injectNOS(injectSheet(styles)(NOSActions));
